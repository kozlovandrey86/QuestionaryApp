//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.QuestionaryServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Questionary", Namespace="http://schemas.datacontract.org/2004/07/Questionary.DAL")]
    [System.SerializableAttribute()]
    public partial class Questionary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondName {
            get {
                return this.SecondNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondNameField, value) != true)) {
                    this.SecondNameField = value;
                    this.RaisePropertyChanged("SecondName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuestionaryServiceReference.IQuestionaryService")]
    public interface IQuestionaryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/List", ReplyAction="http://tempuri.org/IQuestionaryService/ListResponse")]
        System.Collections.Generic.List<WebApplication1.QuestionaryServiceReference.Questionary> List();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/List", ReplyAction="http://tempuri.org/IQuestionaryService/ListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebApplication1.QuestionaryServiceReference.Questionary>> ListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Add", ReplyAction="http://tempuri.org/IQuestionaryService/AddResponse")]
        int Add(WebApplication1.QuestionaryServiceReference.Questionary questionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Add", ReplyAction="http://tempuri.org/IQuestionaryService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(WebApplication1.QuestionaryServiceReference.Questionary questionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Delete", ReplyAction="http://tempuri.org/IQuestionaryService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Delete", ReplyAction="http://tempuri.org/IQuestionaryService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Update", ReplyAction="http://tempuri.org/IQuestionaryService/UpdateResponse")]
        void Update(WebApplication1.QuestionaryServiceReference.Questionary questionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Update", ReplyAction="http://tempuri.org/IQuestionaryService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WebApplication1.QuestionaryServiceReference.Questionary questionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Login", ReplyAction="http://tempuri.org/IQuestionaryService/LoginResponse")]
        bool Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuestionaryService/Login", ReplyAction="http://tempuri.org/IQuestionaryService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQuestionaryServiceChannel : WebApplication1.QuestionaryServiceReference.IQuestionaryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuestionaryServiceClient : System.ServiceModel.ClientBase<WebApplication1.QuestionaryServiceReference.IQuestionaryService>, WebApplication1.QuestionaryServiceReference.IQuestionaryService {
        
        public QuestionaryServiceClient() {
        }
        
        public QuestionaryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuestionaryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionaryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuestionaryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WebApplication1.QuestionaryServiceReference.Questionary> List() {
            return base.Channel.List();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebApplication1.QuestionaryServiceReference.Questionary>> ListAsync() {
            return base.Channel.ListAsync();
        }
        
        public int Add(WebApplication1.QuestionaryServiceReference.Questionary questionary) {
            return base.Channel.Add(questionary);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(WebApplication1.QuestionaryServiceReference.Questionary questionary) {
            return base.Channel.AddAsync(questionary);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void Update(WebApplication1.QuestionaryServiceReference.Questionary questionary) {
            base.Channel.Update(questionary);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WebApplication1.QuestionaryServiceReference.Questionary questionary) {
            return base.Channel.UpdateAsync(questionary);
        }
        
        public bool Login(string login1) {
            return base.Channel.Login(login1);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string login) {
            return base.Channel.LoginAsync(login);
        }
    }
}
